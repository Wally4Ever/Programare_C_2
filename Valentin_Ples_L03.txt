
//gr 2012
//STREAM 40MB impartit in multiple stream-uri
#include <iostream>
#include <cmath>
using namespace std;
#define MIN 2
#define MAX 40

void afis_sol(int);

float p[11];
int x[11], n = 1, cont;

int main(void)
{
        int k, util;
        cout << "Introdu numarul de utilizatori (MAX 10): ";
        cin >> util;
        if (util > 10)
        {
                cout << "Prea multi utilizatori!";
                exit(0);
        }
        float sum = 0;
        for (int i = 0; i < util; i++)
        {
                printf("Ponderea %d: ", i+1);
                cin >> p[i];
                sum += p[i];
        }
        if (sum != 1.0) 
        { 
                cout << "\nPonderi gresite"; 
                exit(0); 
        }
        while (n != 0)
        {
                cout << "\n Debit : ";
                cin >> n;
                if (n <= MAX)
                {
                        cont = 0;
                        k = 0;
                        x[k] = 0;
                        do
                        {
                                while (x[k] < MAX)
                                {
                                        x[k] = x[k] + 1;
                                        if (x[k] > MIN)
                                                if (k == (util-1))
                                                        afis_sol(util);
                                        else 
                                        {
                                                        k++; 
                                                        x[k] = 0; 
                                        }
                                }
                                k--;
                        } while (!(k < 0));
                }
                else cout << "\nNota invalida";
        }
        delete p;
        return 0;
}
void afis_sol(int util)
{
        int l;
        double fraction, integer;
        double number=0;
        int nr;
        for (int i = 0; i < util; i++)
                number += (double)(x[i] * p[i]);
        fraction = modf(number, &integer);
        if (fraction >= .5) 
                integer++;

        l = integer;

        if (l == n)
        {
                for (int i = 0; i < util; i++)
                {
                        nr = round(x[i] * p[i]);
                        printf("Utilizator %d = %d\n", i + 1, nr);
                }
                cout << "\n\n";
                cont++;
                if (cont > 20) {
                        cont = 0;
                        cout << "\nIntrodu un caracter pentru continuare";
                        cin.get();
                }
        }
}
//voiajor
//gr 2012
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX 7
void gene(int k);

int x[MAX], Y[MAX];

int COST[MAX][MAX];

void cit(int[][MAX], int&);

void afis(int[][MAX], int&);

int max_cost(int[][MAX], int&);

void afis_sol(long&);

int posibil(int);

int n;

long cost_M, C;

int main(void)
{
        int k;
        printf("Introdu dim matrice costuri(nr.orase) <=%d\n", MAX);
        scanf("%d", &n);
        printf("Introdu si afis matricea costurilor C\n");
        cit(COST, n);
        afis(COST, n);

        cost_M = (n + 1) * (long)max_cost(COST, n) + 1;
        printf("Cost maxim= %ld\n",cost_M);

        k = 0;
        printf("Introdu orasul initial (0, ..., %d)", n - 1);
        scanf("%d", &x[k]);

        gene(1);

        afis_sol(cost_M); 

        return 0;
}
int posibil(int k)
{
        if (k == 0)
                return 1;
        if (COST[x[k - 1]][x[k]] != 0) 
        {
                for (int i = 0; i < k; i++)
                        if (x[k] == x[i])
                                return 0;
                return 1;
        }
        return 0;
}
void afis_sol(long& CF)
{
        for (int i = 0; i < n; i++)
                printf("%d ", Y[i]);
        printf("\nCostul este %ld", CF);
}

void cit(int mat[][MAX], int& n)
{
        for (int i = 0; i < n; i++)
        {
                for (int j = 0; j < n; j++)
                {
                        printf("Introdu Elem[%d][%d]= ", i+1, j+1);
                        scanf("%d", &mat[i][j]);
                }
        }
}
void afis(int mat[][MAX], int& n)
{
        for (int i = 0; i < n; i++)
        {
                for (int j = 0; j < n; j++)
                        printf("%4d ", mat[i][j]);
                printf("\n");
        }
}
int max_cost(int mat[][MAX], int& n)
{
        int max = mat[0][0];
        for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                        if (mat[i][j] > max)
                                max = mat[i][j];
        return max;
}

void gene(int k) {
        for (int i = 0; i < n; i++)
        {
                x[k] = i;
                if (posibil(k)) 
                        if ((k == (n - 1)) && (COST[x[n - 1]][x[0]] != 0))
                        {
                                C = 0;
                                for (int i = 0; i < n - 1; i++)
                                        C += COST[x[i]][x[i + 1]];
                                C += COST[x[n - 1]][x[0]];
                                if (C < cost_M)
                                        for (int i = 0; i < n; i++) 
                                        { 
                                                Y[i] = x[i]; 
                                                cost_M = C; 
                                        }
                }
                else gene(k + 1);
        }
}
﻿//gr 2012
/*În cadrul unei companii de software se pune problema difuzării unor pachete de date la mai multe filiale, 
maxim 7, valoarea fiind introdusă de la intrarea standard. Filialele sunt dispuse în mai multe puncte din lume, 
costurile de transmisie fiind dependente de poziţia lor geografică. Pachetele trebuie să ajungă la fiecare filială 
chiar dacă nu există o legătură directă între toate filialele ci prin intermediul unei alte filiale caz în care 
pachetul va urma o rută ocolitoare. Costurile necesare transmiterii datelor în reţea se introduc iniţial la 
generarea sistemului. Să se determine şi afişeze ruta pe care trebuie transmise pachetele de date astfel încât 
pornind de la filiala i, citită de la intrarea standard pachetul să fie transmis cu cost minim (eventual cu 
confirmare adică pachetul poate să se întoarcă înapoi).*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX 7
int x[MAX], y[MAX];
int cost[MAX][MAX];
void cit(int[][MAX], int);
void afis(int[][MAX], int);
int max_cost(int[][MAX], int);
void afis_sol(long, int);
int posibil(int);
int main()
{
        int k, n;
        long cost_M, n_C;
        printf("Enter dim of cost matrix(no. of cities) <=%d\n", MAX);
        scanf("%d", &n);
        printf("Enter and display the cost matrix\n");
        cit(cost, n);
        afis(cost, n);

        cost_M = n * (long)max_cost(cost, n) + 1;
        printf("initial max cost is= %ld\n", cost_M);

        k = 0;
        printf("Enter initial city (0, ..., %d)", n - 1);
        scanf("%d", &x[k]);

        k = 1;
        x[k] = -1;
        do {
                while (x[k] < n) 
                {
                        x[k]++; 
                        if (posibil(k)) 
                                if ((k == (n - 1)) && (cost[x[n - 1]][x[0]] != 0)) 
                                {
                                        n_C = 0;
                                        for (int i = 0; i < n - 1; i++)
                                                n_C += cost[x[i]][x[i + 1]];
                                        n_C += cost[x[n - 1]][x[0]];
                                        if (n_C < cost_M)
                                                for (int i = 0; i < n; i++) 
                                                { 
                                                        y[i] = x[i]; 
                                                        cost_M = n_C; 
                                                }
                        }
                        else 
                        { 
                                        k++; 
                                        x[k] = -1; 
                        }
                }
                k--;
        } while (!(k < 1));
        afis_sol(cost_M, n);
}
int posibil(int k)
{
        if (k == 0)
                return 1;
        if (cost[x[k - 1]][x[k]] != 0) 
        {
                for (int i = 0; i < k; i++)
                        if (x[k] == x[i]) 
                                return 0;
                return 1;
        }
        return 0;
}
void afis_sol(long fc, int n)
{
        for (int i = 0; i < n; i++)  
                printf("%d ", y[i]);
        printf("\nThe cost is: %ld", fc);
}
void cit(int mat[][MAX], int n) 
{
        for (int i = 0; i < n - 1; i++)
        {
                mat[i][i] = 0;
                for (int j = i + 1; j < n; j++)
                {
                        printf("Enter elem[%d][%d]= ", i, j);
                        scanf("%d", &mat[i][j]);
                        mat[j][i] = mat[i][j];
                }
        }
}
void afis(int mat[][MAX], int n)
{
        for (int i = 0; i < n; i++)
        {
                for (int j = 0; j < n; j++)
                        printf("%4d ", mat[i][j]);
                printf("\n");
        }
}
int max_cost(int mat[][MAX], int n)
{
        int max = mat[0][0];
        for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                        if (mat[i][j] > max)max = mat[i][j];
        return max;
}
﻿/*investitor cu un capital C şi n oferte la care trebuie avansate 
fondurile fi şi care aduc beneficiile bi, se cere selectarea acelor oferte care îi aduc beneficiul maxim
gr 2012*/

#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

int fond[20], benef[20], x[20], y[20];
vector <int>plan_invest;
int n, capital, lungime_sol;
int max_benef;
void solutie(int);
int main()
{
    ifstream f("fis.txt");
 
    //cout << "Capitalul investitorului: ";
    f>>capital;
  //  cout << "Numarul de oferte ale investitorului: ";
    f>> n;
    for (int i = 0; i < n; i++)
    {
       // printf("Oferta %d necesita fonduri: ", i + 1);
        f >> fond[i];
       // printf("Beneficiile: ");
        f >> benef[i];
    }
    max_benef = benef[0];

    solutie(0);
   
    cout << "Planul de investitii ideal este:\n";
    for (int i = 0; i <= lungime_sol; i++)
        cout << y[i]+1 << ' ';
    cout << "\n\n";
 
    return 0;
}
void solutie(int k)
{
    int sum, tot_benef;

    for (int i = 0; i < n; i++)
    {
        x[k] = i;
        sum = 0;
        tot_benef = 0;
        
        for (int j = 0; j <=k; j++)
        {
            sum += fond[x[j]];
            tot_benef += benef[x[j]];
        }
        if (sum <= capital)
        {
            if (tot_benef >= max_benef)
            {
                for (int j = 0; j <=k; j++)
                    y[j] = x[j];
                //copiere solutie
                max_benef = tot_benef;
                lungime_sol = k;
            }
            solutie(k + 1);
        }
    
    }

}

﻿/*fişier în care stocaţi un şir de numere întregi, generate in mod aleator. Preluaţi prin program aceste 
valori. Folosiţi metoda divide et impera pentru a determina minimul şi maximul din şir şi afisaţi rezultatele pe 
ecran. Actualizaţi fişierul iniţial adăugând aceste două valori.
gr 2012*/
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<time.h>
#include<stdlib.h>

using namespace std;

int gMin(int*, int, int);
int gMax(int*, int, int);

int main() {

        FILE* f;
        int n, a[256], * p;
        char fname[256];
        p = &a[0];
        srand(time(0));

        cout << "Size of the array: ";
        cin >> n;

        for (int i = 0; i < n; i++)
                *(p + i) = rand() % 100;

        cout <<"\nName of the file: ";
        cin >> fname;

        fopen_s(&f, fname, "w");
        if (f == NULL) {
                cout << "Failed to open the file!";
                exit(0);
        }

        fprintf(f, "The array is: \n");
        for (int i = 0; i < n; i++)
                fprintf(f, "%d ", *(p + i));

        cout << "Array copied to the file!";
        fclose(f);

        cout << "\nMinimum value is: " << Min(p, 0, n);
        cout << "\nMaximum value is: " << Max(p, 0, n);

        fopen_s(&f, fname, "a");
        if (f == NULL) {
                cout << "Failed to open the file!";
                exit(0);
        }

        fprintf(f, "\nThe maximum value is %d", Max(p, 0, n));
        fprintf(f, "\nThe minimum value is %d", Min(p, 0, n));

        cout << "\nFile modified!";
        fclose(f);

        cin.get();
        cin.ignore();
        return false;
}

int Min(int* ar, int pozi, int len)
{
        int a, b;
        if (len == 1)
                return *(ar + pozi);
        else
        {
                a = Min(ar, pozi, len / 2);
                b = Min(ar, len / 2 + pozi, len / 2 + len % 2);
                if (a < b)
                        return a;
                else
                        return b;
        }
}
int Max(int* ar, int pozi, int len)
{
        int a, b;
        if (len == 1)
                return *(ar + pozi);
        else
        {
                a = Max(ar, pozi, len / 2);
                b = Max(ar, len / 2 + pozi, len / 2 + len % 2);
                if (a > b)
                        return a;
                else
                        return b;
        }
}

﻿/*c.m.m.d.c. dintr-un tablou unidimensional de numere întregi (max. 2000 de 
valori), utilizând metoda divide et impera.
gr 2012*/
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<time.h>
#include<stdlib.h>

using namespace std;

int cmmdc(int, int, int[]);

int main() {

        
    int n, a[30];
        srand(time(0));

        cout << "Size of the array: ";
        cin >> n;

    for (int i = 0; i < n; i++)
    {
        printf("v[%d]=", i + 1);
        cin >> a[i];
    }

    cout <<"\nCMMDC:"<< cmmdc(1, n, a);
        
        return 0;
}

int cmmdc(int st, int dr, int x[])
{
    int m, m1, m2, r;
    if (st == dr)
        return x[st];
    else
    {
        m = (st + dr) / 2;
        m1 = cmmdc(st, m, x);
        m2 = cmmdc(m + 1, dr, x);
        r = m1 % m2;
        while (r)
        {
            m1 = m2;
            m2 = r;
            r = m1 % m2;
       }
        return m2;
    }
}
 
﻿/*Să se calculeze  1/(1+x2)dx metoda trapezelor, inălţimea fiecărui trapez a cărui arie 
se însumează mai mică decât ε=0.0001. Aria trapezului cu vârfurile în punctele (a,0), (b,0), (a,f(a)) şi 
(b,f(b)) este (b-a)*(f(a)+f(b))/2, iar f(x)=1/(1+x2). 
Se citesc de la tastatură numerele reale a şi b, a≤b. Utilizaţi 
metoda divide et impera
gr 2012*/
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<time.h>
#include<stdlib.h>

#define eps 0.0001

using namespace std;

double func(double);
double calcul(double, double, double(*f)(double));

int main()
{
        double a, b, sol;
        cout << "Capatul stang: ";
        cin >> a;
        cout << "Capatul drept: ";
        cin >> b;
        if (b < a)
                swap(a, b);

        sol = calcul(a, b, &func);
        
        cout << "Valoarea integralei intre [" << a << "," << b << "] este " << sol << endl;
        return 0;
}
double func(double x)
{
        return 1 / (1 + x * x);
}


double calcul(double a, double b, double(*f)(double))
{
        if ((b - a) < eps)
                return (b - a) * ((*f)(a) + (*f)(b)) / 2.0;
        else
        {
                double c = (a + b) / 2.0;
                return calcul(a, c, f) + calcul(c, b, f);
        }
}

﻿/*10 valori întregi, ce vor fi memorate într-un 
tablou unidimensional. Să se verifice dacă o altă valoare generată aleator aparține acestui tablou, utilizând 
funcția _lsearch().
gr 2012*/
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<time.h>
#include<stdlib.h>

using namespace std;

int cmp(const void*, const void*);
int main() 
{

        size_t n;
        int a[11];
        a[10] = -1;

        cout << "Size: ";
        cin >> n;

        srand(time(0));
        for (int i = 0; i < n; i++)
        {
                a[i] = rand() % 100;
                cout << a[i] << ' ';
        }

        int x = rand() % 100;
        cout << "\nValue to be searched: " << x;

        int* item = NULL;
        item=(int*)_lsearch(&x, a, &n, sizeof(int), (int(*) (const void*, const void*))cmp);

        if (a[10] == -1)
                cout << "\nKey " << x << " has been found!\n";
        else
                cout << "\nKey " << x << " was NOT found\n";
        return 0;
}
int cmp(const void* a, const void* b)
{
        return (*(int*)a - *(int*)b);
}

﻿/*tablou unidimensional de maxim 20 de valori întregi. Folosind mecanismul de 
căutare binară, determinați dacă o nouă valoare, a, introdusă de la tastatură există în șir. Dacă da, determinați 
toți factorii primi ai acestei valori pe care îi veți afișa pe ecran.
gr 2012*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

#define DIM 255

void read(int [], int );
void ord(int [], int );
void display(int [], int );
int search(int [], int , int );
void prime(int );

int main()
{
        int x[DIM], n, a;

        cout << "Numbers in the array <= 20: ";
        cin >> n;

        cout << "\nValues for array: \n";
        read(x, n);
        cout << "Ordred array is: \n";
        ord(x, n);
        display(x, n);

        cout << "\n\nGive a value to be searched in the previous array: ";
        cin >> a;

        if (search(x, n, a) == 0)
                cout << "\n\nThe element is not in the array!";
        else
        {
                cout << "\nThe element was found in the array!\n";
                prime(a);
        }

        return 0;
}
void display(int x[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cout << x[i] << " ";
}
void read(int x[], int n)
{
        int i;
        for (i = 0; i < n; i++)
        {
                cout << "x[" << i << "]: ";
                cin >> x[i];
        }
}
void ord(int x[], int n)
{
        int i, j;
        for (i = 0; i < n; i++)
                for (j = i + 1; j < n; j++)
                        if (x[i] > x[j])
                                swap(x[i], x[j]);
}
int search(int x[], int n, int a)
{
        int i;
        if (x[n] == a)
                return a;
        else if (n == 0)
                        return 0;
        else
        {
                if (a > (int)n / 2)
                {
                        for (i = n / 2; i < n; i++)
                                if (a == x[i])
                                {
                                        return a;
                                        break;
                                }
                        return search(x, n / 2, a);
                }
                else
                {
                        for (i = 0; i < n / 2; i++)
                                if (a == x[i])
                                {
                                        return a;
                                        break;
                                }
                        return search(x, n / 2, a);
                }
        }
}
void prime(int a)
{
        int i;
        cout << "\nAll the prime factors for " << a << " are: ";

        for (i = 2; i <= a; i++)
                while (a % i == 0)
                {
                        cout << i <<' ';
                        a /= i;
                }
}

﻿/*Folosind un fișier care conține numere reale ordonate, căutați o valoare reală a introdusă de la tastatură în 
cadrul șirului, folosind algoritmul de căutare binară iterativ, recursiv și funcția de bibliotecă bsearch(). Afișați 
șirul citit, valoarea a și poziția folosind cei trei algoritmi specificați
gr 2012*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

#define DIM 255

void display(int [], int );
int search_rec(int *, int , int, int );

int main()
{
        int x[DIM], n, a, i;

        FILE* f;
        fopen_s(&f, "fis.txt", "r");
        if (f == NULL) 
        {
                cout << "Failed to open the file!";
                exit(0);
        }

        fscanf(f, "%d", & n);
        for (i = 0; i < n; i++)
                fscanf(f, "%d", &x[i]);

        display(x, n);

        cout << "\n\nGive a value to be searched in the previous array: ";
        cin >> a;

        if (search_rec(x, 1, n, a) == 0)
                cout << "\n\nThe element is not in the array!";
        else
                cout << "\nThe element was found in the array @ pozition "<< search_rec(x, 1, n, a)+1<<"\n";

        return 0;
}
void display(int x[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cout << x[i] << " ";
}

int search_rec(int* p, int inc, int sfr, int val)
{
        int mij;
        mij = (inc + sfr) / 2;
        if (p[mij] == val)
                return mij;
        if (inc <= sfr) {
                if (p[mij] > val)
                        sfr = mij - 1;
                else
                        inc = mij + 1;
                return search_rec(p, inc, sfr, val);
        }
        return -1;
}
