
//gr 2012
//MAX folosind macrofunctions
#include <iostream>
#define MAX2(a, b) ((a) > (b) ? (a) : (b))
#define MAX3(a, b, c) {if (b>=a && b>=c)\
                                                a = b;\
                                                else if (c>=a && c>=b)\
                                                                a = c;\
                                        }
using namespace std;
int main()
{
        int a, b, c;
        cout << "a=";
        cin >> a; 
        cout << "b=";
        cin >> b;
        cout << "c=";
        cin >> c;

        cout << "\nMax(a, b) = " << MAX2(a, b);

        MAX3(a, b, c);

        cout << "\nMax(a, b, c) = " << a;
}


//gr 2012
//MIN folosind inline
#include <iostream>
using namespace std;

inline int min(int, int);
inline int min(int, int, int);
int main()
{
    int a, b, c;
    cout << "a=";
    cin >> a;
    cout << "b=";
    cin >> b;
    cout << "c=";
    cin >> c;

    cout << "\nMIN(a, b) = " << min(a, b);
    cout << "\nMIN(a, b, c) = " << min(a, b, c);
    
}
inline int min(int a, int b)
{
    return ((a > b) ? b : a);
}
inline int min(int a, int b, int c)
{
    int x = min(a, b);
    int y = min(b, c);
    return min(x, y);
}



//gr 2012
//validare date student
#include <iostream>
#include <assert.h>
#include <string.h>
using namespace std;

struct Student {
    char nume[30];
    int nota;
};

int main()
{
    Student x;
    cout << "Introdu numele studentului: ";
    cin.getline(x.nume, 30);
    assert(strlen(x.nume) > 5);
    cout << "Introdu nota studentului: ";
    cin >> x.nota;
    assert(x.nota >= 5 && x.nota <= 10);
    printf("\nStudentul %s are nota %d", x.nume, x.nota);
}



//  a function with 3 implicit parameters (int, float, double) that returns the product of the values
// gr 2012
#include <iostream>
using namespace std;

double prod(int x = 3, float y = 4.5, double z = 6.3);

int main()
{
        cout << "Produsul (0 param) este: " << prod();
        cout << "\nProdusul (1 param) este: " << prod(1);
        cout << "\nProdusul (2 param) este: " << prod(1, 1);
        cout << "\nProdusul (3 param) este: " << prod(2, 3, 5);
        return 0;
}

double prod(int x, float y, double z)
{
        return x * y * z;
}



//   overloading define 3 functions with the same name but with different prams type
//gr 2012
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cmath>

using namespace std;

float squaree(int a);
float squaree(int* x, int a);
float squaree(int& x, int a);

int main()
{
        int x;
        cout << "Introduceti numarul: ";
        cin >> x;

        cout << "\nPrimul radical este: " << squaree(x);
        
        cout << "\nAl doilea radical este: " << squaree(x, 1);


        cout << "\nAl 3 lea radical este: " << squaree(x, 2);;
        return 0;
}

float squaree(int a)
{
        return sqrt(a);
}
float squaree(int* x, int a)
{
        return sqrt(*x);
}
float squaree(int& x, int a)
{
        return sqrt(x);
}




/*Determine the minimum of a 10 float numbers from a string (implicit values or from the KB) using a function
with a variable number of parameters. The first 7 values will be considered initially, next the last 3 and at the
end these 2 values
Gr 2012*/


#include <stdio.h>
#include <stdarg.h>
#include <conio.h>

double min(double, ...);

int main()
{
        double a, b, c;
        a = min(7, 13, 2, 1, 4, 5, 6, 7);
        printf("The min between the first 7 no is: %.1lf", a);
        b = min(3, 8, 9, 10);
        printf("\nThe min between the last 3 no is: %.1lf", b);
        c = min(2, a, b);
        printf("\nThe min between all the numbers is: %.1lf", c);
        return 1;
}

double min(double x, ...)
{
        double minin = 9999;
        double a;
        va_list lst;
        va_start(lst, x);
        for (int i = 0; i < x; i++) {
                if ((a = va_arg(lst, int)) < minin)
                {
                        minin = a;
                }
        }
        va_end(lst);
        return minin;
}




/*increasing with 3 the value of the ASCII code of a
character using macro functions
Gr 2012
*/
#include <iostream>

using namespace std;
#define UP(x) { x+=3; }

int main()
{
        char c;
        cout << "Enter the wanted char: ";
        cin >> c;
        UP(c);
        cout << "The new char is: " << c;
        
        return 0;
}



/*name of the program, the compilation date and time and the number of code
lines
Gr 2012
*/
#include <conio.h>
#include <stdio.h>

int main()
{
        printf("Numele programului: %s", __FILE__);
        printf("\n\nData compilarii: %s", __DATE__);
        printf("\n\nOra compilarii: %s", __TIME__);
        printf("\n\nNumarul de linii de cod: %d\n\n", __LINE__);
        return 0;
}